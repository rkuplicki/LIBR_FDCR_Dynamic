s1$coefficients[, 'Estimate']
s1$coefficients[, 'Estimate']['conditiondrug']
s1$coefficients[, 'Std. Error']['conditiondrug']
tr_beta <- s1[, 'Estimate']['time']
tr_se <- s1[, 'Std. Error']['time']
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
tr_beta
tr_se
plot_frame <- NULL
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
this_list
this_list$model
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
print('one')
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
s1
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
condition_beta
conditionxtime_beta
tr_beta
condition_se
conditionxtime_se
tr_se
this_list$task
plot_one_beh <- function(measure, this_label, idps, limits_spag, limits_y = c(1, 4), prefix = 'dcr_', task = ''){
#same as above, but for behavioral data
#prefix will be dcr_tpre_ for tdcs/tacs and dcr_ for neurocaps
#measure will be box_rt, craving_rt, or craving
#measure <- 'craving'
#prefix <- 'dcr_tpre_'
#this_label <- 'Craving'
#idps <- idps_tdcs
#idps_tacs$dcr_tpre_response_craving_[0-7]
#idp_tdcs
#dcr_tpre_response_box_rt_0
#dcr_tpre_response_craving_rt_0
#idps_neurocaps_ocr$dcr_response_box_craving[0-7]
column_suffixes <- 0:7
these_cols <- c('id', paste0(prefix, 'response_', measure, '_', column_suffixes))
library(reshape2)
one_dataset <- idps[, these_cols]
long_data <- melt(one_dataset, id.vars = c('id'))
long_data$variable <- as.character(long_data$variable)
long_data$condition <- NA
long_data$number <- substr(long_data$variable, nchar(long_data$variable), nchar(long_data$variable))
long_data$condition[long_data$number %in% c('0', '2', '4', '6')] <- 'neutral'
long_data$condition[long_data$number %in% c('1', '3', '5', '7')] <- 'drug'
#put neutral in the intercept
long_data$condition <- factor(long_data$condition, levels = c('neutral', 'drug'))
#time = block number, just like for the imaging variables
long_data$time <- NA
long_data$time[long_data$number %in% c('0', '1')] <- 1
long_data$time[long_data$number %in% c('2', '3')] <- 2
long_data$time[long_data$number %in% c('4', '5')] <- 3
long_data$time[long_data$number %in% c('6', '7')] <- 4
#mean center on time
long_data$time <- long_data$time - mean(long_data$time)
library(lme4)
library(lmerTest)
library(ggplot2)
library(sjstats) #for icc of mixed effects models
#this_lme <- lmer(paste('value ~ condition * time + (1|id)'), data = long_data)
#for checking for NA's, looks like it's all good now
#print(long_data)
this_lme <- lmer(paste('value ~ condition * time +  (1|id/condition)'), data = long_data)
#print(summary(this_lme))
within_visit_iccs <- sjstats::icc(this_lme)
n_subjects <- length(unique(long_data$id))
means <- aggregate(long_data$value, by = list(long_data$condition, long_data$time), FUN = mean, na.rm = TRUE)
names(means)[1:2] <- c('condition', 'time')
sds <- aggregate(long_data$value, by = list(long_data$condition, long_data$time), FUN = sd, na.rm = TRUE)
names(sds)[1:2] <- c('condition', 'time')
#print(this_label)
mean_str <- paste(this_label, '_mean', sep = '')
names(means)[3] <- mean_str
sd_str <- paste(this_label, '_sd', sep = '')
se_str <- paste(this_label, '_se', sep = '')
names(sds)[3] <- sd_str
plot_frame <- merge(means, sds)
plot_frame[, se_str] <- plot_frame[, sd_str] / sqrt(n_subjects)
plot_frame$bar_top <- plot_frame[, mean_str] + plot_frame[, se_str]
plot_frame$bar_bottom <- plot_frame[, mean_str] - plot_frame[, se_str]
plot_frame$label <- this_label
ebsize <- 1.5
linesize <- 1
#swap condition levels back for this plot, so that drug is red and neutral is blue
plot_frame$condition <- factor(plot_frame$condition, levels = c('drug', 'neutral'))
p <- ggplot(plot_frame) + geom_line(aes_string(x = 'time', y = mean_str, color = 'condition'), size = linesize) + geom_errorbar(aes_string(x = 'time', ymax = 'bar_top',                                                       ymin = 'bar_bottom', color = 'condition', width = 0.1), size = ebsize) +
theme(text = element_text(size=10)) + ggtitle(task) + ylab('') + xlab('') + ylim(limits_y)
#print(p)
p2 <- ggplot(data = long_data[long_data$condition == 'drug',], aes_string(x = 'time', y = 'value', group = 'id')) +
geom_line() + stat_summary(aes(group = 1), geom = "point", fun.y = mean, shape = 17, size = 3) +
stat_smooth(aes(group = 1)) + labs(
x = "Time",
y = this_label,
title = "drug")
#print(p2)
p3 <- ggplot(data = long_data[long_data$condition == 'neutral',], aes_string(x = 'time', y = 'value', group = 'id')) +
geom_line() + stat_summary(aes(group = 1), geom = "point", fun.y = mean, shape = 17, size = 3) +
stat_smooth(aes(group = 1)) + labs(
x = "Time",
y = this_label,
title = "neutral")
#print(p3)
wide_icc_data <- dcast(long_data, id ~ variable)
within_iccs_simple <- ICC(wide_icc_data[, 2:ncol(wide_icc_data)])
within_iccs_simple_intervals <- extract_icc_intervals(within_iccs_simple)
wide_icc_data_contrasts <- dcast(long_data, id + time ~ condition)
wide_icc_data_contrasts$DrugvNeutral <- wide_icc_data_contrasts$drug - wide_icc_data_contrasts$neutral
contrast_icc_data <- dcast(wide_icc_data_contrasts, id ~ time, value.var = 'DrugvNeutral')
contrast_iccs <- ICC(contrast_icc_data[, 2:ncol(contrast_icc_data)])
within_contrast_icc_intervals <- extract_icc_intervals(contrast_iccs)
return(list(model = this_lme, plotframe = plot_frame, p = p, p2=p2, p3=p3, dset = long_data, within_visit_iccs = within_visit_iccs,
within_iccs_simple_intervals = within_iccs_simple_intervals,
within_contrast_icc_intervals = within_contrast_icc_intervals, task = task))
}
if (imaging){
tdcs_list <- plot_one(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
} else {
tdcs_list <- plot_one_beh(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one_beh(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one_beh(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one_beh(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
}
plot_frame <- NULL
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
print('one')
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
if (imaging){
tdcs_list <- plot_one(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
} else {
tdcs_list <- plot_one_beh(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one_beh(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one_beh(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one_beh(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
}
plot_one <- function(roi, this_label, idps, limits_spag, limits_y = c(-1, 1), prefix = 'dcr_', task = ''){
#roi <- '1'
#this_label <- 'VMPFC'
#roi <- '1'
#this_label <- 'VMPFC'
#prefix <- 'dcr_tpre_'
#idps <- idps_tdcs
column_prefixes <- c('stats_tdcsprelim_drug.r11.0.coef_mean_',
'stats_tdcsprelim_drug.r12.0.coef_mean_',
'stats_tdcsprelim_drug.r13.0.coef_mean_',
'stats_tdcsprelim_drug.r14.0.coef_mean_',
'stats_tdcsprelim_neutral.r11.0.coef_mean_',
'stats_tdcsprelim_neutral.r12.0.coef_mean_',
'stats_tdcsprelim_neutral.r13.0.coef_mean_',
'stats_tdcsprelim_neutral.r14.0.coef_mean_')
this_roi <- c('id', 'motion', paste0(prefix, column_prefixes, roi))
one_dataset <- idps[, this_roi]
long_data <- melt(one_dataset, id.vars = c('id', 'motion'))
long_data$condition <- NA
long_data$condition[grepl('neutral', long_data$variable)] <- 'neutral'
long_data$condition[grepl('drug', long_data$variable)] <- 'drug'
#put neutral in the intercept
long_data$condition <- factor(long_data$condition, levels = c('neutral', 'drug'))
long_data$time <- NA
long_data$time[grepl('r11', long_data$variable)] <- 1
long_data$time[grepl('r12', long_data$variable)] <- 2
long_data$time[grepl('r13', long_data$variable)] <- 3
long_data$time[grepl('r14', long_data$variable)] <- 4
#mean center on time
long_data$time <- long_data$time - mean(long_data$time)
#this_lme <- lmer(paste('value ~ condition * time + (1|id)'), data = long_data)
#for checking for NA's, looks like it's all good now
#print(long_data)
this_lme <- lmer(paste('value ~ condition * time + motion + (1|id/condition)'), data = long_data)
#print(summary(this_lme))
within_visit_iccs <- sjstats::icc(this_lme)
n_subjects <- length(unique(long_data$id))
means <- aggregate(long_data$value, by = list(long_data$condition, long_data$time), FUN = mean, na.rm = TRUE)
names(means)[1:2] <- c('condition', 'time')
sds <- aggregate(long_data$value, by = list(long_data$condition, long_data$time), FUN = sd, na.rm = TRUE)
names(sds)[1:2] <- c('condition', 'time')
#print(this_label)
mean_str <- paste(this_label, '_mean', sep = '')
names(means)[3] <- mean_str
sd_str <- paste(this_label, '_sd', sep = '')
se_str <- paste(this_label, '_se', sep = '')
names(sds)[3] <- sd_str
plot_frame <- merge(means, sds)
plot_frame[, se_str] <- plot_frame[, sd_str] / sqrt(n_subjects)
plot_frame$bar_top <- plot_frame[, mean_str] + plot_frame[, se_str]
plot_frame$bar_bottom <- plot_frame[, mean_str] - plot_frame[, se_str]
plot_frame$label <- this_label
ebsize <- 1.5
linesize <- 1
#swap condition levels back for this plot, so that drug is red and neutral is blue
plot_frame$condition <- factor(plot_frame$condition, levels = c('drug', 'neutral'))
p <- ggplot(plot_frame) + geom_line(aes_string(x = 'time', y = mean_str, color = 'condition'), size = linesize) + geom_errorbar(aes_string(x = 'time', ymax = 'bar_top',                                                       ymin = 'bar_bottom', color = 'condition', width = 0.1), size = ebsize) +
theme(text = element_text(size=10)) + ggtitle(task) + ylab('') + xlab('') + ylim(limits_y)
#print(p)
p2 <- ggplot(data = long_data[long_data$condition == 'drug',], aes_string(x = 'time', y = 'value', group = 'id')) +
geom_line() + stat_summary(aes(group = 1), geom = "point", fun.y = mean, shape = 17, size = 3) +
stat_smooth(aes(group = 1)) + labs(
x = "Time",
y = "% Signal Change",
title = "drug")
#print(p2)
p3 <- ggplot(data = long_data[long_data$condition == 'neutral',], aes_string(x = 'time', y = 'value', group = 'id')) +
geom_line() + stat_summary(aes(group = 1), geom = "point", fun.y = mean, shape = 17, size = 3) +
stat_smooth(aes(group = 1)) + labs(
x = "Time",
y = "% Signal Change",
title = "neutral")
#print(p3)
wide_icc_data <- dcast(long_data, id ~ variable)
within_iccs_simple <- ICC(wide_icc_data[, 2:ncol(wide_icc_data)])
within_iccs_simple_intervals <- extract_icc_intervals(within_iccs_simple)
wide_icc_data_contrasts <- dcast(long_data, id + time ~ condition)
wide_icc_data_contrasts$DrugvNeutral <- wide_icc_data_contrasts$drug - wide_icc_data_contrasts$neutral
contrast_icc_data <- dcast(wide_icc_data_contrasts, id ~ time, value.var = 'DrugvNeutral')
contrast_iccs <- ICC(contrast_icc_data[, 2:ncol(contrast_icc_data)])
within_contrast_icc_intervals <- extract_icc_intervals(contrast_iccs)
return(list(model = this_lme, plotframe = plot_frame, p = p, p2=p2, p3=p3, dset = long_data, within_visit_iccs = within_visit_iccs,
within_iccs_simple_intervals = within_iccs_simple_intervals,
within_contrast_icc_intervals = within_contrast_icc_intervals, task = task))
}
if (imaging){
tdcs_list <- plot_one(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
} else {
tdcs_list <- plot_one_beh(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212MCR')
neurocaps_mcr_list <- plot_one_beh(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'WiRMCR')
neurocaps_ocr_list <- plot_one_beh(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = '1212OCR')
tacs_list <- plot_one_beh(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = '1212OCR2')
}
compare_models(tdcs_list$model, neurocaps_mcr_list$model, neurocaps_ocr_list$model, tacs_list$model, label)
###
#extract betas and SEs for contrasts, to compare with finer grained method
plot_frame <- NULL
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
print('one')
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
plot_frame
#ggplot(plot_frame) + geom_point(aes(y = beta, x = effect))
plot_frame$lower = plot_frame$beta - 1.96*plot_frame$se
plot_frame$upper = plot_frame$beta + 1.96*plot_frame$se
#plot_frame$task <- factor(plot_frame$task, levels = c('Discovery Sample', 'Replication Sample 1', 'Replication Sample 2', 'Sample 2-Retest'))
plot_frame$task <- factor(plot_frame$task, levels = c('Sample 2-Retest', 'Replication Sample 2','Replication Sample 1', 'Discovery Sample'))
plot_frame$effect <- factor(plot_frame$effect, levels = c('drugVneutral', 'Time', 'drugVneutralXtime'))
p = ggplot(data=plot_frame,
aes(x = task,y = beta, ymin = lower, ymax = upper ))+
geom_pointrange(aes(col=task))+
geom_hline(aes(fill=task),yintercept =0, linetype=2)+
xlab(label)+ ylab("Contrast Beta (95% Confidence Interval)")+
geom_errorbar(aes(ymin=lower, ymax=upper,col=task),width=0.5,cex=1)+
facet_wrap(~effect,strip.position="left",nrow=3,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
coord_flip() + scale_colour_manual(values = col_check2('Set1', 4))
print(p)
##taken from jsPlot/color_utils.R to matchbe able to match colors easily
col_check2 <- function(geom.colors, collen) {
# --------------------------------------------
# check color argument
# --------------------------------------------
# check for corrct color argument
if (!is.null(geom.colors)) {
# check for color brewer palette
if (is.brewer.pal(geom.colors[1])) {
geom.colors <- scales::brewer_pal(palette = geom.colors[1])(collen)
} else if (is.sjplot.pal(geom.colors[1])) {
geom.colors <- get_sjplot_colorpalette(geom.colors[1], collen)
# do we have correct amount of colours?
} else if (geom.colors[1] == "gs") {
geom.colors <- scales::grey_pal()(collen)
# do we have correct amount of colours?
} else if (geom.colors[1] == "bw") {
geom.colors <- rep("black", times = collen)
# do we have correct amount of colours?
} else if (length(geom.colors) > collen) {
# shorten palette
geom.colors <- geom.colors[1:collen]
} else if (length(geom.colors) < collen) {
# repeat color palette
geom.colors <- rep(geom.colors, times = collen)
# shorten to required length
geom.colors <- geom.colors[1:collen]
}
} else {
geom.colors <- scales::brewer_pal(palette = "Set1")(collen)
}
geom.colors
}
# check whether a color value is indicating
# a color brewer palette
is.brewer.pal <- function(pal) {
bp.seq <- c("BuGn", "BuPu", "GnBu", "OrRd", "PuBu", "PuBuGn", "PuRd", "RdPu",
"YlGn", "YlGnBu", "YlOrBr", "YlOrRd", "Blues", "Greens", "Greys",
"Oranges", "Purples", "Reds")
bp.div <- c("BrBG", "PiYG", "PRGn", "PuOr", "RdBu", "RdGy", "RdYlBu",
"RdYlGn", "Spectral")
bp.qul <- c("Accent", "Dark2", "Paired", "Pastel1", "Pastel2", "Set1",
"Set2", "Set3")
bp <- c(bp.seq, bp.div, bp.qul)
pal %in% bp
}
p = ggplot(data=plot_frame,
aes(x = task,y = beta, ymin = lower, ymax = upper ))+
geom_pointrange(aes(col=task))+
geom_hline(aes(fill=task),yintercept =0, linetype=2)+
xlab(label)+ ylab("Contrast Beta (95% Confidence Interval)")+
geom_errorbar(aes(ymin=lower, ymax=upper,col=task),width=0.5,cex=1)+
facet_wrap(~effect,strip.position="left",nrow=3,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
coord_flip() + scale_colour_manual(values = col_check2('Set1', 4))
print(p)
print(p)
plot_frame
tdcs_list$task
plot_frame
plot_row
rbind(NULL, plot_row)
plot_frame <- NULL
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
print('one')
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
plot_frame
plot_frame$task <- factor(plot_frame$task, levels = c('1212OCR2', '1212OCR','WiRMCR', '1212MCR'))
plot_frame$effect <- factor(plot_frame$effect, levels = c('drugVneutral', 'Time', 'drugVneutralXtime'))
p = ggplot(data=plot_frame,
aes(x = task,y = beta, ymin = lower, ymax = upper ))+
geom_pointrange(aes(col=task))+
geom_hline(aes(fill=task),yintercept =0, linetype=2)+
xlab(label)+ ylab("Contrast Beta (95% Confidence Interval)")+
geom_errorbar(aes(ymin=lower, ymax=upper,col=task),width=0.5,cex=1)+
facet_wrap(~effect,strip.position="left",nrow=3,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
coord_flip() + scale_colour_manual(values = col_check2('Set1', 4))
print(p)
p
#print model with restricted range
print(plot_models(tdcs_list$model, neurocaps_mcr_list$model, neurocaps_ocr_list$model, tacs_list$model, m.labels = c('tDCS', 'WirMCR', '1212OCR', '1212OCR2')) + ylim(forest_range))
plot_frame$lower = plot_frame$beta - 1.96*plot_frame$se
plot_frame$upper = plot_frame$beta + 1.96*plot_frame$se
#plot_frame$task <- factor(plot_frame$task, levels = c('Discovery Sample', 'Replication Sample 1', 'Replication Sample 2', 'Sample 2-Retest'))
#plot_frame$task <- factor(plot_frame$task, levels = c('Sample 2-Retest', 'Replication Sample 2','Replication Sample 1', 'Discovery Sample'))
plot_frame$task <- factor(plot_frame$task, levels = c('1212OCR2', '1212OCR','WiRMCR', '1212MCR'))
plot_frame$effect <- factor(plot_frame$effect, levels = c('drugVneutral', 'Time', 'drugVneutralXtime'))
p = ggplot(data=plot_frame,
aes(x = task,y = beta, ymin = lower, ymax = upper ))+
geom_pointrange(aes(col=task))+
geom_hline(aes(fill=task),yintercept =0, linetype=2)+
xlab(label)+ ylab("Contrast Beta (95% Confidence Interval)")+
geom_errorbar(aes(ymin=lower, ymax=upper,col=task),width=0.5,cex=1)+
facet_wrap(~effect,strip.position="left",nrow=3,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
coord_flip() + scale_colour_manual(values = col_check2('Set1', 4))
print(p)
roi <- '9'
label <- 'LIFG'
limits_y = c(-0.3, 0.5)
limits_spag = c(-2, 2)
imaging = TRUE
if (imaging){
tdcs_list <- plot_one(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = 'Discovery Sample')
neurocaps_mcr_list <- plot_one(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'Replication Sample 1')
neurocaps_ocr_list <- plot_one(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'Replication Sample 2')
tacs_list <- plot_one(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = 'Sample 2-Retest')
} else {
tdcs_list <- plot_one_beh(roi, label, idps_tdcs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = 'Discovery Sample')
neurocaps_mcr_list <- plot_one_beh(roi, label, idps_neurocaps_mcr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'Replication Sample 1')
neurocaps_ocr_list <- plot_one_beh(roi, label, idps_neurocaps_ocr, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_', task = 'Replication Sample 2')
tacs_list <- plot_one_beh(roi, label, idps_tacs, limits_spag = limits_spag, limits_y = limits_y, prefix = 'dcr_tpre_', task = 'Sample 2-Retest')
}
compare_models(tdcs_list$model, neurocaps_mcr_list$model, neurocaps_ocr_list$model, tacs_list$model, label)
###
#extract betas and SEs for contrasts, to compare with finer grained method
plot_frame <- NULL
for(this_list in list(tdcs_list, neurocaps_mcr_list, neurocaps_ocr_list, tacs_list)){
print('one')
s1 <- summary(this_list$model)
condition_beta <- s1$coefficients[, 'Estimate']['conditiondrug']
conditionxtime_beta <- s1$coefficients[, 'Estimate']['conditiondrug:time']
condition_se <- s1$coefficients[, 'Std. Error']['conditiondrug']
conditionxtime_se <- s1$coefficients[, 'Std. Error']['conditiondrug:time']
tr_beta <- s1$coefficients[, 'Estimate']['time']
tr_se <- s1$coefficients[, 'Std. Error']['time']
plot_row <- data.frame(beta = c(condition_beta, conditionxtime_beta, tr_beta), se = c(condition_se, conditionxtime_se, tr_se),
effect = c('drugVneutral', 'drugVneutralXtime', 'Time'), task = this_list$task)
plot_frame <- rbind(plot_frame, plot_row)
}
#ggplot(plot_frame) + geom_point(aes(y = beta, x = effect))
plot_frame$lower = plot_frame$beta - 1.96*plot_frame$se
plot_frame$upper = plot_frame$beta + 1.96*plot_frame$se
#plot_frame$task <- factor(plot_frame$task, levels = c('Discovery Sample', 'Replication Sample 1', 'Replication Sample 2', 'Sample 2-Retest'))
plot_frame$task <- factor(plot_frame$task, levels = c('Sample 2-Retest', 'Replication Sample 2','Replication Sample 1', 'Discovery Sample'))
#plot_frame$task <- factor(plot_frame$task, levels = c('1212OCR2', '1212OCR','Replication Sample 1', '1212MCR'))
plot_frame$effect <- factor(plot_frame$effect, levels = c('drugVneutral', 'Time', 'drugVneutralXtime'))
p = ggplot(data=plot_frame,
aes(x = task,y = beta, ymin = lower, ymax = upper ))+
geom_pointrange(aes(col=task))+
geom_hline(aes(fill=task),yintercept =0, linetype=2)+
xlab(label)+ ylab("Contrast Beta (95% Confidence Interval)")+
geom_errorbar(aes(ymin=lower, ymax=upper,col=task),width=0.5,cex=1)+
facet_wrap(~effect,strip.position="left",nrow=3,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
coord_flip() + scale_colour_manual(values = col_check2('Set1', 4))
print(p)
p
rawp = c(0.0198, 0.03774, 0.0265, 0.04445, 0.0238, 0.047, 0.026, 0.0277, 0.0416, 0.0193, 0.03439, 0.00949, 0.0341)
#FDR for a single data
round(p.adjust(rawp, "fdr"), 3)
rawp = c(0.0198, 0.03774, 0.0265, 0.04445, 0.0238, 0.047, 0.3, 0.0277, 0.0416, 0.0193, 0.03439, 0.00949, 0.0341)
#FDR for a single data
round(p.adjust(rawp, "fdr"), 3)
